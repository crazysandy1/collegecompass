// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A college recommendation AI agent.
 *
 * - collegeRecommendation - A function that handles the college recommendation process.
 * - CollegeRecommendationInput - The input type for the collegeRecommendation function.
 * - CollegeRecommendationOutput - The return type for the collegeRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const CollegeRecommendationInputSchema = z.object({
  academicInterests: z
    .string()
    .describe('The academic interests of the student, e.g. computer science, engineering, etc.'),
  preferredLocation: z
    .string()
    .describe('The preferred location of the student, e.g. city, state, or region.'),
  financialConstraints: z
    .string()
    .describe('The financial constraints of the student, e.g. maximum tuition fee they can afford.'),
});
export type CollegeRecommendationInput = z.infer<typeof CollegeRecommendationInputSchema>;

const CollegeRecommendationOutputSchema = z.object({
  collegeRecommendations: z
    .string()
    .describe('A list of college recommendations based on the student preferences.'),
});
export type CollegeRecommendationOutput = z.infer<typeof CollegeRecommendationOutputSchema>;

export async function collegeRecommendation(input: CollegeRecommendationInput): Promise<CollegeRecommendationOutput> {
  return collegeRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'collegeRecommendationPrompt',
  input: {schema: CollegeRecommendationInputSchema},
  output: {schema: CollegeRecommendationOutputSchema},
  prompt: `You are an expert college advisor specializing in recommending colleges to students.

You will use the following information to recommend colleges to the student.

Academic Interests: {{{academicInterests}}}
Preferred Location: {{{preferredLocation}}}
Financial Constraints: {{{financialConstraints}}}

Based on the above information, please provide a list of college recommendations.`,
});

const collegeRecommendationFlow = ai.defineFlow(
  {
    name: 'collegeRecommendationFlow',
    inputSchema: CollegeRecommendationInputSchema,
    outputSchema: CollegeRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
